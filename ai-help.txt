'use client';
import { useState } from 'react';
import ChatInterface from '../components/ChatInterface';

export default function Home() {
  const [conversationState, setConversationState] = useState({
    step: 0,
    patient: {
      name: '',
      age: '',
      sex: '',
      symptoms: []
    }
  });

  const handleSendMessage = async (message) => {
    try {
      let updatedState = { ...conversationState };
      if (updatedState.step === 0 && !updatedState.patient.name) {
        updatedState.patient.name = message;
        updatedState.step = 1;
        setConversationState(updatedState);
        return `Hi ${message}, please describe your symptoms (comma-separated):`;
      }

      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          message,
          currentState: updatedState
        })
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Request failed');
      }

      const data = await response.json();
      setConversationState(data.newState);
      return data.response;
    } catch (error) {
      throw new Error(error.message || 'Failed to process your request');
    }
  };

  return (
    <div className="min-h-screen bg-gray-100 py-8">
      <div className="max-w-2xl mx-auto px-4">
        <ChatInterface 
          onSendMessage={handleSendMessage}
          initialMessage="Welcome to Medical Chatbot. Please enter your name"
        />
      </div>
    </div>
  );
}

route file
import { NextResponse } from 'next/server';

export async function POST(request) {
    try {
        const { message, currentState } = await request.json();
        let newState = { ...currentState };
        let botResponse = '';

        if (newState.step === 0) {
            if (message.toLowerCase().includes('gastro')) {
                newState.specialist = 'gastro';
                botResponse = "Please describe your symptoms (comma-separated):";
                newState.step = 1;
            } else if (message.toLowerCase().includes('chest') || message.toLowerCase().includes('breathing')) {
                newState.specialist = 'chest/breathing';
                botResponse = "Please describe your symptoms (comma-separated):";
                newState.step = 1;
            } else {
                botResponse = "Please specify if you need a gastro specialist or a chest/breathing specialist.";
            }
            return NextResponse.json({ response: botResponse, newState });
        }

        switch(newState.step) {
            case 1:
            newState.patient.symptoms = message.split(',').map(s => s.trim());
            if (newState.specialist === 'gastro') {
                botResponse = "You can consult a Gastroenterologist for these symptoms.";
            } else if (newState.specialist === 'chest/breathing') {
                botResponse = "You can consult a Pulmonologist for these symptoms.";
            } else {
                botResponse = "Please enter your age:";
                newState.step = 2;
            }
            break;
            case 2:
            newState.patient.age = message;
            botResponse = `Thank you. Please enter your sex (Male/Female/Other):`;
            newState.step = 3;
            break;
            case 3:
            newState.patient.sex = message;
            botResponse = `Got it. Please enter your country:`;
            newState.step = 4;
            break;
            case 4:
            newState.patient.country = message;
            botResponse = `Please enter your state:`;
            newState.step = 5;
            break;
            case 5:
            newState.patient.state = message;
            botResponse = `Is the problem constant? (Yes/No):`;
            newState.step = 6;
            break;
            case 6:
            newState.patient.isConstant = message.toLowerCase() === 'yes';
            botResponse = `On a scale of 1 to 10, how severe is the problem?`;
            newState.step = 7;
            break;
            case 7:
            newState.patient.severity = parseInt(message, 10);
            const gastroSymptoms = ['gastro', 'chest pain', 'vomiting', 'stomach ache'];
            const chestBreathingSymptoms = ['chest pain', 'breathing issue', 'shortness of breath', 'tightness in chest', 'wheezing', 'persistent cough'];
            const hasGastroSymptoms = newState.patient.symptoms.some(symptom => gastroSymptoms.includes(symptom.toLowerCase()));
            const hasChestBreathingSymptoms = newState.patient.symptoms.some(symptom => chestBreathingSymptoms.includes(symptom.toLowerCase()));
            if (hasGastroSymptoms) {
                botResponse = `Do your symptoms improve after eating food? (Yes/No):`;
                newState.step = 8;
            } else if (hasChestBreathingSymptoms) {
                botResponse = `Do your symptoms improve after exercise or physical activities? (Yes/No):`;
                newState.step = 9;
            } else {
                const diagnosis = await getDiagnosis(newState.patient);
                botResponse = formatDiagnosis(diagnosis);
                newState.step = 0;
            }
            break;
            case 8:
            newState.patient.improvesAfterFood = message.toLowerCase() === 'yes';
            const diagnosisAfterFood = await getDiagnosis(newState.patient);
            botResponse = formatDiagnosis(diagnosisAfterFood);
            newState.step = 0;
            break;
            case 9:
            newState.patient.improvesAfterExercise = message.toLowerCase() === 'yes';
            const diagnosisAfterExercise = await getDiagnosis(newState.patient);
            botResponse = formatDiagnosis(diagnosisAfterExercise);
            newState.step = 0;
            break;
            default:
            botResponse = "Let's start over. Please describe your symptoms (comma-separated):";
            newState.step = 1;
        }

        if (message.toLowerCase().includes('medicine') || message.toLowerCase().includes('treatment')) {
            botResponse = `I understand you're looking for relief, ${newState.patient.name}. It's better to talk to a doctor for prescriptions.`;
        }

        return NextResponse.json({ response: botResponse, newState });
    } catch (error) {
        console.error('API Error:', error);
        return NextResponse.json(
            { error: error.message || 'Internal server error' },
            { status: 500 }
        );
    }
}

async function getDiagnosis(patient) {
    try {
        const prompt = `Patient: ${patient.name}, ${patient.age} years old, ${patient.sex}
Symptoms: ${patient.symptoms.join(', ')}

Generate top 3 possible medical conditions with percentage likelihood. 
Return ONLY valid JSON in this exact format:
{
    "conditions": [
        {"condition": "Disease 1", "likelihood": 50},
        {"condition": "Disease 2", "likelihood": 30},
        {"condition": "Disease 3", "likelihood": 20}
    ]
}
Do not include any additional text or explanations.`;

        const response = await fetch('https://api.deepseek.com/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${process.env.DEEPSEEK_API_KEY}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                model: 'deepseek-chat',
                messages: [{ role: 'user', content: prompt }],
                temperature: 0.3
            })
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || `API request failed with status ${response.status}`);
        }

        const data = await response.json();
        console.log('Raw API Response:', data.choices[0].message.content);
        try {
            const responseText = data.choices[0].message.content;
            
            // Remove potential markdown formatting
            const cleanedResponse = responseText
                .replace(/```json/g, '')
                .replace(/```/g, '')
                .trim();
        
            const result = JSON.parse(cleanedResponse);
            
            // Validate structure
            if (!result.conditions || !Array.isArray(result.conditions)) {
                throw new Error('Invalid response structure');
            }
            
            return result;
        } catch (parseError) {
            console.error('Parsing failed. Raw response:', responseText);
            throw new Error('Failed to parse diagnosis response');
        }
        
    } catch (error) {
        console.error('Diagnosis Error:', error);
        throw new Error(`Diagnosis service error: ${error.message}`);
    }
}

function formatDiagnosis(diagnosis) {
    if (diagnosis.error) return diagnosis.error;
    
    let response = "Based on your symptoms, possible conditions are:\n";
    diagnosis.conditions.forEach(cond => {
        response += `â€¢ ${cond.condition}: ${cond.likelihood}%\n`;
    });
    response += "\nPlease consult a medical professional for accurate diagnosis.";
    return response;
}